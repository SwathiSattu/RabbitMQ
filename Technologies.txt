API Gateway: Netflix, Zipkin
Service Registry - Eureka, Netflix, Zookeeper
Metrics: Kibana, Logstash, PCF(default)
Message Brokers: RabbitMQ
Log Analysis: Splunk, Kibana
SSO: PCF UAA, Spring Boot OAuth/OAuth2
Log Aggregation: AWS Watch, Splunk, Kibana, Papertrail
Adaptor(connector-Integration): JBoss Fuse, Camel, Mulesoft, TibcoESB
REST API: Apache CFX, Sprint Rest Controller(Boot), RAML


Challenges of Micro Service Achitecture: Low Cost(disadvtage), DB migration, Cost fro Service to Service Communication, Prod ready Features(Solutn: Profiling, Common Config), Security, Fallback mechanisms in case service failure(Soltn: Circuit Breakers - HYSTRIX)
Micro Service Architecture : More Cost and maintainence is easy
Microservcies is mostly on composite rest services and uses 2phase commit protocol

----------------------------------------------------------------
http://projects.spring.io/spring-cloud/#quick-start

----------------------------------------------------------------
SOLID (object-oriented design)
S	
Single responsibility principle [Front Controller]
a class should have only a single responsibility (i.e. changes to only one part of the software's specification should be able to affect the specification of the class).
O	
Open/closed principle
“software entities … should be open for extension, but closed for modification.”
L	
Liskov substitution principle
“objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.” See also design by contract.
I	
Interface segregation principle
“many client-specific interfaces are better than one general-purpose interface.”
D	
Dependency inversion principle [Spring IOC, Dependency Injection]
one should “depend upon abstractions, [not] concretions.”